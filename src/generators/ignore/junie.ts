import { join } from "node:path";
import type { Config, GeneratedOutput, ParsedRule } from "../../types/index.js";
import { extractIgnorePatternsFromRules } from "./shared-helpers.js";

export async function generateJunieIgnoreFiles(
  rules: ParsedRule[],
  config: Config,
  baseDir?: string,
): Promise<GeneratedOutput[]> {
  const outputs: GeneratedOutput[] = [];

  const aiignoreContent = generateAiignoreContent(rules);
  const outputPath = baseDir || process.cwd();
  const filepath = join(outputPath, ".aiignore");

  outputs.push({
    tool: "junie",
    filepath,
    content: aiignoreContent,
  });

  return outputs;
}

function generateAiignoreContent(rules: ParsedRule[]): string {
  const lines: string[] = [
    "# Generated by rulesync - JetBrains Junie AI ignore file",
    "# This file controls which files the AI can access automatically",
    "# AI must ask before reading or editing matched files/directories",
    "",
    "# ───── Source Control Metadata ─────",
    ".git/",
    ".svn/",
    ".hg/",
    ".idea/",
    "*.iml",
    ".vscode/settings.json",
    "",
    "# ───── Build Artifacts ─────",
    "/out/",
    "/dist/",
    "/target/",
    "/build/",
    "*.class",
    "*.jar",
    "*.war",
    "",
    "# ───── Secrets & Credentials ─────",
    "# Environment files",
    ".env",
    ".env.*",
    "!.env.example",
    "",
    "# Key material",
    "*.pem",
    "*.key",
    "*.crt",
    "*.p12",
    "*.pfx",
    "*.der",
    "id_rsa*",
    "id_dsa*",
    "*.ppk",
    "",
    "# Cloud and service configs",
    "aws-credentials.json",
    "gcp-service-account*.json",
    "azure-credentials.json",
    "secrets/**",
    "config/secrets/",
    "**/secrets/",
    "",
    "# Database credentials",
    "database.yml",
    "**/database/config.*",
    "",
    "# API keys and tokens",
    "**/apikeys/",
    "**/*_token*",
    "**/*_secret*",
    "**/*api_key*",
    "",
    "# ───── Infrastructure & Deployment ─────",
    "# Terraform state",
    "*.tfstate",
    "*.tfstate.*",
    ".terraform/",
    "",
    "# Kubernetes secrets",
    "**/k8s/**/secret*.yaml",
    "**/kubernetes/**/secret*.yaml",
    "",
    "# Docker secrets",
    "docker-compose.override.yml",
    "**/docker/secrets/",
    "",
    "# ───── Logs & Runtime Data ─────",
    "*.log",
    "*.tmp",
    "*.cache",
    "logs/",
    "/var/log/",
    "coverage/",
    ".nyc_output/",
    "",
    "# ───── Large Data Files ─────",
    "*.csv",
    "*.xlsx",
    "*.sqlite",
    "*.db",
    "*.dump",
    "data/",
    "datasets/",
    "",
    "# ───── Node.js Specific ─────",
    "node_modules/",
    ".pnpm-store/",
    ".yarn/",
    ".next/",
    ".nuxt/",
    ".cache/",
    ".parcel-cache/",
    "",
    "# ───── Python Specific ─────",
    "__pycache__/",
    "*.pyc",
    "*.pyo",
    "*.pyd",
    ".Python",
    "venv/",
    ".venv/",
    "env/",
    ".env/",
    "",
    "# ───── Java Specific ─────",
    "*.class",
    "*.jar",
    "*.war",
    "target/",
    "",
  ];

  // Add patterns from rules with specific formatting for ignore files
  const rulePatterns = extractIgnorePatternsFromRules(rules);
  if (rulePatterns.length > 0) {
    lines.push("# ───── Project-specific exclusions from rulesync rules ─────");
    lines.push(...rulePatterns);
    lines.push("");
  }

  lines.push(
    "# ───── Allow specific source files (uncomment as needed) ─────",
    "# !src/**/*.ts",
    "# !src/**/*.js",
    "# !lib/**/*.py",
    "# !src/main/**/*.java",
    "",
  );

  return lines.join("\n");
}
