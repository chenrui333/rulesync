import { join } from "node:path";
import type { Config, GeneratedOutput, ParsedRule, ToolTarget } from "../../types/index.js";
import { loadIgnorePatterns } from "../../utils/ignore.js";

export interface RuleGeneratorConfig {
  tool: ToolTarget;
  fileExtension: string;
  ignoreFileName: string;
  generateContent: (rule: ParsedRule) => string;
}

/**
 * Generic generator for rule files that follows common patterns
 */
export async function generateRulesConfig(
  rules: ParsedRule[],
  config: Config,
  generatorConfig: RuleGeneratorConfig,
  baseDir?: string,
): Promise<GeneratedOutput[]> {
  const outputs: GeneratedOutput[] = [];

  // Generate rule files
  for (const rule of rules) {
    const content = generatorConfig.generateContent(rule);
    const outputDir = baseDir
      ? join(baseDir, config.outputPaths[generatorConfig.tool])
      : config.outputPaths[generatorConfig.tool];
    const filepath = join(outputDir, `${rule.filename}${generatorConfig.fileExtension}`);

    outputs.push({
      tool: generatorConfig.tool,
      filepath,
      content,
    });
  }

  // Generate ignore file if .rulesyncignore exists
  const ignorePatterns = await loadIgnorePatterns(baseDir);
  if (ignorePatterns.patterns.length > 0) {
    const ignorePath = baseDir
      ? join(baseDir, generatorConfig.ignoreFileName)
      : generatorConfig.ignoreFileName;

    const ignoreContent = generateIgnoreFile(ignorePatterns.patterns, generatorConfig.tool);

    outputs.push({
      tool: generatorConfig.tool,
      filepath: ignorePath,
      content: ignoreContent,
    });
  }

  return outputs;
}

/**
 * Generate ignore file content with standard header
 */
export function generateIgnoreFile(patterns: string[], tool: ToolTarget): string {
  const lines: string[] = [
    "# Generated by rulesync from .rulesyncignore",
    "# This file is automatically generated. Do not edit manually.",
  ];

  // Add tool-specific comment for unofficial support
  if (tool === "copilot") {
    lines.push("# Note: .copilotignore is not officially supported by GitHub Copilot.");
    lines.push("# This file is for use with community tools like copilotignore-vscode extension.");
  }

  lines.push("");
  lines.push(...patterns);

  return lines.join("\n");
}
